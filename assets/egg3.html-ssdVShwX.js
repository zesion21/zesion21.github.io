import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as n}from"./app-CFuNIExP.js";const l={},t=n(`<p>在前面的章节中，我们介绍了 Egg 是基于 Koa 实现的，所以 Egg 的中间件形式和 Koa 的中间件形式是一样的，都是基于洋葱圈模型。每次我们编写一个中间件，就相当于在洋葱外面包了一层。<br> 原文档地址：<a href="https://eggjs.org/zh-cn/basics/middleware.html" target="_blank" rel="noopener noreferrer">中间件（Middleware）</a></p><h2 id="编写中间件" tabindex="-1"><a class="header-anchor" href="#编写中间件"><span>编写中间件</span></a></h2><h3 id="写法" tabindex="-1"><a class="header-anchor" href="#写法"><span>写法</span></a></h3><p>我们先来通过编写一个简单的 gzip 中间件，来看看中间件的写法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/middleware/gzip.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> isJSON</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;koa-is-json&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> zlib</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;zlib&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> function</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  await</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 后续中间件执行完成后将响应体转换成 gzip</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  let</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> body </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">!</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">body) </span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">isJSON</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body)) body </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> JSON</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">stringify</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 设置 gzip body，修正响应头</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> stream</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> zlib.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">createGzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  stream.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">end</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> stream;</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  ctx.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">set</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;Content-Encoding&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;gzip&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，框架的中间件和 Koa 的中间件写法是一模一样的，所以任何 Koa 的中间件都可以直接被框架使用。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>一般来说中间件也会有自己的配置。在框架中，一个完整的中间件是包含了配置处理的。我们约定一个中间件是一个放置在 <code>app/middleware</code> 目录下的单独文件，它需要 exports 一个普通的 function，接受两个参数：</p><ul><li>options: 中间件的配置项，框架会将 <code>app.config[\${middlewareName}]</code> 传递进来。</li><li>app: 当前应用 Application 的实例。</li></ul><p>我们将上面的 <code>gzip</code> 中间件做一个简单的优化，让它支持指定只有当 body 大于配置的 threshold 时才进行 gzip 压缩，我们要在<code> app/middleware</code> 目录下新建一个文件<code> gzip.js</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> isJSON</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;koa-is-json&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> zlib</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;zlib&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">options</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> async</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> function</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    await</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // 后续中间件执行完成后将响应体转换成 gzip</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    let</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> body </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">!</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">body) </span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // 支持 options.threshold</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (options.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">threshold</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> &amp;&amp;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">length</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> &lt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> options.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">threshold</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">isJSON</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body)) body </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> JSON</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">stringify</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // 设置 gzip body，修正响应头</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> stream</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> zlib.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">createGzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    stream.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">end</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(body);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> stream;</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    ctx.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">set</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;Content-Encoding&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;gzip&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用中间件" tabindex="-1"><a class="header-anchor" href="#使用中间件"><span>使用中间件</span></a></h2><p>中间件编写完成后，我们还需要手动挂载，支持以下方式：</p><h3 id="在应用中使用中间件" tabindex="-1"><a class="header-anchor" href="#在应用中使用中间件"><span>在应用中使用中间件</span></a></h3><p>在应用中，我们可以完全通过配置来加载自定义的中间件，并决定它们的顺序。</p><p>如果我们需要加载上面的 <code>gzip</code> 中间件，在 <code>config.default.js</code> 中加入下面的配置就完成了中间件的开启和配置：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 配置需要的中间件，数组顺序即为中间件的加载顺序</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">  middleware</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> [</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;gzip&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 配置 gzip 中间件的配置</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">  gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">    threshold</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#AE81FF;--shiki-light:#986801;"> 1024</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// 小于 1k 的响应体不压缩</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置最终将在启动时合并到 <code>app.config.appMiddleware</code>。</p><h3 id="在框架和插件中使用中间件" tabindex="-1"><a class="header-anchor" href="#在框架和插件中使用中间件"><span>在框架和插件中使用中间件</span></a></h3><p>框架和插件不支持在 config.default.js 中匹配 middleware，需要通过以下方式：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 在中间件最前面统计请求时间</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">config</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">coreMiddleware</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">unshift</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;report&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/middleware/report.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> () </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> async</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> function</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> startTime</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> Date.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">now</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    await</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // 上报请求时间</span></span>
<span class="line"><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">    reportTime</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(Date.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">now</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">-</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> startTime);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用层定义的中间件（app.config.appMiddleware）和框架默认中间件（app.config.coreMiddleware）都会被加载器加载，并挂载到 app.middleware 上。</p><h3 id="router-中使用中间件" tabindex="-1"><a class="header-anchor" href="#router-中使用中间件"><span>router 中使用中间件</span></a></h3><p>以上两种方式配置的中间件是全局的，会处理每一次请求。 如果你只想针对单个路由生效，可以直接在 app/router.js 中实例化和挂载，如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> gzip</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">middleware</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">({ </span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">threshold</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#AE81FF;--shiki-light:#986801;"> 1024</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">router</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;/needgzip&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, gzip, app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">handler</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="框架默认中间件" tabindex="-1"><a class="header-anchor" href="#框架默认中间件"><span>框架默认中间件</span></a></h2><p>除了应用层加载中间件之外，框架自身和其他的插件也会加载许多中间件。所有的这些自带中间件的配置项都通过在配置中修改中间件同名配置项进行修改，例如框架自带的中间件中有一个 bodyParser 中间件（框架的加载器会将文件名中的各种分隔符都修改成驼峰形式的变量名），我们想要修改 bodyParser 的配置，只需要在 <code>config/config.default.js </code>中编写</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">  bodyParser</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">    jsonLimit</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;"> &quot;10mb&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：框架和插件加载的中间件会在应用层配置的中间件之前，框架默认中间件不能被应用层中间件覆盖，如果应用层有自定义同名中间件，在启动时会报错。</strong></p><h2 id="通用配置" tabindex="-1"><a class="header-anchor" href="#通用配置"><span>通用配置</span></a></h2><p>无论是应用层加载的中间件还是框架自带中间件，都支持几个通用的配置项：</p><ul><li>enable：控制中间件是否开启。</li><li>match：设置只有符合某些规则的请求才会经过这个中间件。</li><li>ignore：设置符合某些规则的请求不经过这个中间件。</li></ul><h3 id="enable" tabindex="-1"><a class="header-anchor" href="#enable"><span>enable</span></a></h3><p>如果我们的应用并不需要默认的 bodyParser 中间件来进行请求体的解析，此时我们可以通过配置 enable 为 false 来关闭它</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  bodyParser: {</span></span>
<span class="line"><span>    enable: false,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match-和-ignore" tabindex="-1"><a class="header-anchor" href="#match-和-ignore"><span>match 和 ignore</span></a></h3><p>match 和 ignore 支持的参数都一样，只是作用完全相反，match 和 ignore 不允许同时配置。</p><p>如果我们想让 gzip 只针对 <code>/static</code> 前缀开头的 url 请求开启，我们可以配置 match 选项</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">  gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">    match</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;"> &quot;/static&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>match 和 ignore 支持多种类型的配置方式</p><p>字符串：当参数为字符串类型时，配置的是一个 url 的路径前缀，所有以配置的字符串作为前缀的 url 都会匹配上。 当然，你也可以直接使用字符串数组。 正则：当参数为正则时，直接匹配满足正则验证的 url 的路径。 函数：当参数为一个函数时，会将请求上下文传递给这个函数，最终取函数返回的结果（true/false）来判断是否匹配。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">  gzip</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">    match</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">      // 只有 ios 设备才开启</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">      const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> reg</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E6DB74;--shiki-light:#0184BC;"> /iphone</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">|</span><span style="--shiki-dark:#E6DB74;--shiki-light:#0184BC;">ipad</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">|</span><span style="--shiki-dark:#E6DB74;--shiki-light:#0184BC;">ipod/</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">i</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">      return</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> reg.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">test</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(ctx.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;user-agent&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">));</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),h=[t];function e(k,p){return a(),s("div",null,h)}const F=i(l,[["render",e],["__file","egg3.html.vue"]]),g=JSON.parse('{"path":"/article/node/2021/egg3.html","title":"Egg 学习笔记（三） 之 中间件（Middleware）","lang":"zh-CN","frontmatter":{"title":"Egg 学习笔记（三） 之 中间件（Middleware）","date":"2021-07-30T00:00:00.000Z","tags":["egg"],"categories":["Node"],"description":"在前面的章节中，我们介绍了 Egg 是基于 Koa 实现的，所以 Egg 的中间件形式和 Koa 的中间件形式是一样的，都是基于洋葱圈模型。每次我们编写一个中间件，就相当于在洋葱外面包了一层。 原文档地址：中间件（Middleware） 编写中间件 写法 我们先来通过编写一个简单的 gzip 中间件，来看看中间件的写法。 可以看到，框架的中间件和 Ko...","head":[["meta",{"property":"og:url","content":"http://zesionlee.cn/article/node/2021/egg3.html"}],["meta",{"property":"og:site_name","content":"全栈笔记"}],["meta",{"property":"og:title","content":"Egg 学习笔记（三） 之 中间件（Middleware）"}],["meta",{"property":"og:description","content":"在前面的章节中，我们介绍了 Egg 是基于 Koa 实现的，所以 Egg 的中间件形式和 Koa 的中间件形式是一样的，都是基于洋葱圈模型。每次我们编写一个中间件，就相当于在洋葱外面包了一层。 原文档地址：中间件（Middleware） 编写中间件 写法 我们先来通过编写一个简单的 gzip 中间件，来看看中间件的写法。 可以看到，框架的中间件和 Ko..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-31T09:25:21.000Z"}],["meta",{"property":"article:author","content":"阿琛"}],["meta",{"property":"article:tag","content":"egg"}],["meta",{"property":"article:published_time","content":"2021-07-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-31T09:25:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Egg 学习笔记（三） 之 中间件（Middleware）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-31T09:25:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿琛\\",\\"url\\":\\"http://zesionlee.cn\\"}]}"]]},"headers":[{"level":2,"title":"编写中间件","slug":"编写中间件","link":"#编写中间件","children":[{"level":3,"title":"写法","slug":"写法","link":"#写法","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"使用中间件","slug":"使用中间件","link":"#使用中间件","children":[{"level":3,"title":"在应用中使用中间件","slug":"在应用中使用中间件","link":"#在应用中使用中间件","children":[]},{"level":3,"title":"在框架和插件中使用中间件","slug":"在框架和插件中使用中间件","link":"#在框架和插件中使用中间件","children":[]},{"level":3,"title":"router 中使用中间件","slug":"router-中使用中间件","link":"#router-中使用中间件","children":[]}]},{"level":2,"title":"框架默认中间件","slug":"框架默认中间件","link":"#框架默认中间件","children":[]},{"level":2,"title":"通用配置","slug":"通用配置","link":"#通用配置","children":[{"level":3,"title":"enable","slug":"enable","link":"#enable","children":[]},{"level":3,"title":"match 和 ignore","slug":"match-和-ignore","link":"#match-和-ignore","children":[]}]}],"git":{"createdTime":1722325759000,"updatedTime":1722417921000,"contributors":[{"name":"zesionlee","email":"39211025+zesion21@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.77,"words":1430},"filePathRelative":"article/node/2021/egg3.md","localizedDate":"2021年7月30日","excerpt":"<p>在前面的章节中，我们介绍了 Egg 是基于 Koa 实现的，所以 Egg 的中间件形式和 Koa 的中间件形式是一样的，都是基于洋葱圈模型。每次我们编写一个中间件，就相当于在洋葱外面包了一层。<br>\\n原文档地址：<a href=\\"https://eggjs.org/zh-cn/basics/middleware.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">中间件（Middleware）</a></p>\\n<h2>编写中间件</h2>\\n<h3>写法</h3>\\n<p>我们先来通过编写一个简单的 gzip 中间件，来看看中间件的写法。</p>","autoDesc":true}');export{F as comp,g as data};
