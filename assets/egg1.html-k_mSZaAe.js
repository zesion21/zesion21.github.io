import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,b as a}from"./app-CFuNIExP.js";const e={},l=a(`<h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h2><p>在快速入门中，大家对框架应该有了初步的印象，接下来我们简单了解下目录约定规范。</p><p>原文档地址： <a href="https://www.eggjs.org/zh-CN/basics/structure" target="_blank" rel="noopener noreferrer">目录结构</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span>egg-project</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── app.js (可选)</span></span>
<span class="line"><span>├── agent.js (可选)</span></span>
<span class="line"><span>├── app</span></span>
<span class="line"><span>|   ├── router.js</span></span>
<span class="line"><span>│   ├── controller</span></span>
<span class="line"><span>│   |   └── home.js</span></span>
<span class="line"><span>│   ├── service (可选)</span></span>
<span class="line"><span>│   |   └── user.js</span></span>
<span class="line"><span>│   ├── middleware (可选)</span></span>
<span class="line"><span>│   |   └── response_time.js</span></span>
<span class="line"><span>│   ├── schedule (可选)</span></span>
<span class="line"><span>│   |   └── my_task.js</span></span>
<span class="line"><span>│   ├── public (可选)</span></span>
<span class="line"><span>│   |   └── reset.css</span></span>
<span class="line"><span>│   ├── view (可选)</span></span>
<span class="line"><span>│   |   └── home.tpl</span></span>
<span class="line"><span>│   └── extend (可选)</span></span>
<span class="line"><span>│       ├── helper.js (可选)</span></span>
<span class="line"><span>│       ├── request.js (可选)</span></span>
<span class="line"><span>│       ├── response.js (可选)</span></span>
<span class="line"><span>│       ├── context.js (可选)</span></span>
<span class="line"><span>│       ├── application.js (可选)</span></span>
<span class="line"><span>│       └── agent.js (可选)</span></span>
<span class="line"><span>├── config</span></span>
<span class="line"><span>|   ├── plugin.js</span></span>
<span class="line"><span>|   ├── config.default.js</span></span>
<span class="line"><span>│   ├── config.prod.js</span></span>
<span class="line"><span>|   ├── config.test.js (可选)</span></span>
<span class="line"><span>|   ├── config.local.js (可选)</span></span>
<span class="line"><span>|   └── config.unittest.js (可选)</span></span>
<span class="line"><span>└── test</span></span>
<span class="line"><span>    ├── middleware</span></span>
<span class="line"><span>    |   └── response_time.test.js</span></span>
<span class="line"><span>    └── controller</span></span>
<span class="line"><span>        └── home.test.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置基础对象" tabindex="-1"><a class="header-anchor" href="#内置基础对象"><span>内置基础对象</span></a></h2><p>包括从 <a href="https://koajs.com/" target="_blank" rel="noopener noreferrer">Koa</a> 继承而来的 4 个对象（Application, Context, Request, Response) 以及框架扩展的一些对象（Controller, Service, Helper, Config, Logger）。<br> 原文档地址：<a href="https://www.eggjs.org/zh-CN/basics/objects" target="_blank" rel="noopener noreferrer">框架内置基础对象</a></p><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application"><span>Application</span></a></h2><p>Application 是全局应用对象，在一个应用中，只会实例化一个，它继承自 Koa.Application，在它上面我们可以挂载一些全局的方法和对象。我们可以轻松的在插件或者应用中扩展 Application 对象。</p><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h3><p>在框架运行时，会在 Application 实例上触发一些事件，应用开发者或者插件开发者可以监听这些事件做一些操作。作为应用开发者，我们一般会在启动自定义脚本中进行监听。</p><ul><li>server: 该事件一个 worker 进程只会触发一次，在 HTTP 服务完成启动后，会将 HTTP server 通过这个事件暴露出来给开发者。</li><li>error: 运行时有任何的异常被 onerror 插件捕获后，都会触发 error 事件，将错误对象和关联的上下文（如果有）暴露给开发者，可以进行自定义的日志记录上报等处理。</li><li>request 和 response: 应用收到请求和响应请求时，分别会触发 request 和 response 事件，并将当前请求上下文暴露出来，开发者可以监听这两个事件来进行日志记录</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">once</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;server&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">server</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // websocket</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">on</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;error&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">err</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // report error</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">on</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;request&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // log receive request</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">on</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;response&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // ctx.starttime is set by framework</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> used</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> Date.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">now</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">-</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">starttime</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // log total cost</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  });</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取方式" tabindex="-1"><a class="header-anchor" href="#获取方式"><span>获取方式</span></a></h3><p>Application 对象几乎可以在编写应用时的任何一个地方获取到，下面介绍几个经常用到的获取方式：</p><p>几乎所有被框架 <a href="https://www.eggjs.org/zh-CN/advanced/loader" target="_blank" rel="noopener noreferrer">Loader</a> 加载的文件（Controller，Service，Schedule 等），都可以 export 一个函数，这个函数会被 Loader 调用，并使用 app 作为参数：</p><p><a href="https://eggjs.org/zh-cn/basics/app-start.html" target="_blank" rel="noopener noreferrer">启动自定义脚本</a>：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">cache</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> new</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> Cache</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller 文件：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/controller/user.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  async</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> fetch</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;">    this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">cache</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;">this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">query</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 可以通过 <code>ctx.app</code> 访问到 Application 对象</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/controller/user.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  async</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> fetch</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;">    this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">cache</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;">this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">query</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h2><p>Context 是一个请求级别的对象，继承自 Koa.Context。在每一次收到用户请求时，框架会实例化一个 Context 对象，这个对象封装了这次用户请求的信息，并提供了许多便捷的方法来获取请求参数或者设置响应信息。框架会将所有的 Service 挂载到 Context 实例上，一些插件也会将一些其他的方法和对象挂载到它上面（egg-sequelize 会将所有的 model 挂载在 Context 上）。</p><h3 id="获取方式-1" tabindex="-1"><a class="header-anchor" href="#获取方式-1"><span>获取方式</span></a></h3><p>最常见的 Context 实例获取方式是在 Middleware, Controller 以及 Service 中。Controller 中的获取方式在上面的例子中已经展示过了，在 Service 中获取和 Controller 中获取的方式一样，在 Middleware 中获取 Context 实例则和 Koa 框架在中间件中获取 Context 对象的方式一致。</p><p>框架的 Middleware 同时支持 Koa v2 的中间件写法：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// Koa v2</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> function</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> middleware</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">next</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // ctx is instance of Context</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  console.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">log</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">query</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="request-response" tabindex="-1"><a class="header-anchor" href="#request-response"><span>Request &amp; Response</span></a></h2><p>Request 是一个<strong>请求级别的对象</strong>，继承自 Koa.Request。封装了 Node.js 原生的 HTTP Request 对象，提供了一系列辅助方法获取 HTTP 请求常用参数。</p><p>Response 是一个<strong>请求级别的对象</strong>，继承自 Koa.Response。封装了 Node.js 原生的 HTTP Response 对象，提供了一系列辅助方法设置 HTTP 响应。</p><h3 id="获取方式-2" tabindex="-1"><a class="header-anchor" href="#获取方式-2"><span>获取方式</span></a></h3><p>可以在 Context 的实例上获取到当前请求的 <code>Request(ctx.request)</code> 和 <code>Response(ctx.response)</code> 实例</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/controller/user.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  async</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> fetch</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> id</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">request</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">query</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">response</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">cache</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(id);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Koa 会在 Context 上代理一部分 Request 和 Response 上的方法和属性，参见 Koa.Context。 如上面例子中的 ctx.request.query.id 和 ctx.query.id 是等价的，ctx.response.body= 和 ctx.body= 是等价的。 需要注意的是，获取 POST 的 body 应该使用 ctx.request.body，而不是 ctx.body。</p><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>Controller</span></a></h2><p>框架提供了一个 Controller 基类，并推荐所有的 Controller 都继承于该基类实现。这个 Controller 基类有下列属性：</p><ul><li>ctx - 当前请求的 Context 实例。</li><li>app - 应用的 Application 实例。</li><li>config - 应用的配置。</li><li>service - 应用所有的 service。</li><li>logger - 为当前 controller 封装的 logger 对象。</li></ul><p>在 Controller 文件中，可以通过两种方式来引用 Controller 基类：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/controller/user.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// 从 egg 上获取（推荐）</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> Controller</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;egg&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">).</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // implement</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> UserController;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// 从 app 实例上获取</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#50A14F;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;">Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // implement</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h2><p>框架提供了一个 Service 基类，并推荐所有的 Service 都继承于该基类实现。 Service 基类的属性和 Controller 基类属性一致，访问方式也类似：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/service/user.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// 从 egg 上获取（推荐）</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> Service</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;egg&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">).</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">Service</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserService</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Service</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // implement</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> UserService;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// 从 app 实例上获取</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) </span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">=&gt;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserService</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#50A14F;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;">Service</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">    // implement</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  };</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helper" tabindex="-1"><a class="header-anchor" href="#helper"><span>Helper</span></a></h2><p>Helper 用来提供一些实用的 utility 函数。它的作用在于我们可以将一些常用的动作抽离在 helper.js 里面成为一个独立的函数，这样可以用 JavaScript 来写复杂的逻辑，避免逻辑分散各处，同时可以更好的编写测试用例。<br> Helper 自身是一个类，有和 Controller 基类一样的属性，它也会在每次请求时进行实例化，因此 Helper 上的所有函数也能获取到当前请求相关的上下文信息。</p><h3 id="获取方式-3" tabindex="-1"><a class="header-anchor" href="#获取方式-3"><span>获取方式</span></a></h3><p>可以在 Context 的实例上获取到当前请求的 <code>Helper(ctx.helper)</code> 实例。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/controller/user.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> UserController</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Controller</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  async</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> fetch</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() {</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;">app</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;">ctx</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;">=</span><span style="--shiki-dark:#FD971F;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> id</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">query</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">id</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> user</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> app.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">cache</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(id);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">body</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> ctx.</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">helper</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">formatUser</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(user);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，Helper 的实例还可以在模板中获取到，例如可以在模板中获取到 <code>security</code> 插件提供的 shtml 方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/view/home.nj</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  {</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">    helper.</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">shtml</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(value);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义-helper-方法" tabindex="-1"><a class="header-anchor" href="#自定义-helper-方法"><span>自定义 helper 方法</span></a></h3><p>应用开发中，我们可能经常要自定义一些 helper 方法，例如上面例子中的 formatUser，我们可以通过框架扩展的形式来自定义 helper 方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">// app/extend/helper.js</span></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">module</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#66D9EF;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">exports</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;">  formatUser</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#FD971F;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">user</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> only</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(user, [</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;name&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;phone&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">]);</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">  },</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>Config</span></a></h2><p>我们推荐应用开发遵循配置和代码分离的原则，将一些需要硬编码的业务配置都放到配置文件中，同时配置文件支持各个不同的运行环境使用不同的配置，使用起来也非常方便</p><h3 id="获取方式-4" tabindex="-1"><a class="header-anchor" href="#获取方式-4"><span>获取方式</span></a></h3><p>我们可以通过 <code>app.config</code> 从 Application 实例上获取到 config 对象，也可以在 Controller, Service, Helper 的实例上通过 <code>this.config</code> 获取到 config 对象。 有框架、插件和应用级别的配置都可以通过 Config 对象获取到，关于框架的配置，可以详细阅读 <a href="https://eggjs.org/zh-cn/basics/config.html" target="_blank" rel="noopener noreferrer">Config 配置</a>章节。</p><h2 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>Logger</span></a></h2><p>框架内置了功能强大的日志功能，可以非常方便的打印各种级别的日志到对应的日志文件中，每一个 logger 对象都提供了 4 个级别的方法：</p><ul><li>logger.debug()</li><li>logger.info()</li><li>logger.warn()</li><li>logger.error()</li></ul><p>在框架中提供了多个 Logger 对象，下面我们简单的介绍一下各个 Logger 对象的获取方式和使用场景。</p><h3 id="app-logger" tabindex="-1"><a class="header-anchor" href="#app-logger"><span>App Logger</span></a></h3><p>我们可以通过<code> app.logger</code> 来获取到它，如果我们想做一些应用级别的日志记录，如记录启动阶段的一些数据信息，记录一些业务上与请求无关的信息，都可以通过 App Logger 来完成。</p><h3 id="app-corelogger" tabindex="-1"><a class="header-anchor" href="#app-corelogger"><span>App CoreLogger</span></a></h3><p>我们可以通过 app.coreLogger 来获取到它，一般我们在开发应用时都不应该通过 CoreLogger 打印日志，而框架和插件则需要通过它来打印应用级别的日志，这样可以更清晰的区分应用和框架打印的日志，通过 CoreLogger 打印的日志会放到和 Logger 不同的文件中。</p><h3 id="context-logger" tabindex="-1"><a class="header-anchor" href="#context-logger"><span>Context Logger</span></a></h3><p>我们可以通过 <code>ctx.logger</code> 从 Context 实例上获取到它，从访问方式上我们可以看出来，Context Logger 一定是与请求相关的，它打印的日志都会在前面带上一些当前请求相关的信息（如 <code>[$userId/$ip/$traceId/\${cost}ms $method $url]</code>），通过这些信息，我们可以从日志快速定位请求，并串联一次请求中的所有的日志</p><h3 id="context-corelogger" tabindex="-1"><a class="header-anchor" href="#context-corelogger"><span>Context CoreLogger</span></a></h3><p>我们可以通过 <code>ctx.coreLogger </code>获取到它，和 Context Logger 的区别是一般只有插件和框架会通过它来记录日志。</p><h3 id="controller-logger-service-logger" tabindex="-1"><a class="header-anchor" href="#controller-logger-service-logger"><span>Controller Logger &amp; Service Logger</span></a></h3><p>我们可以在 <code>Controller</code> 和 <code>Service</code> 实例上通过 <code>this.logger</code> 获取到它们，它们本质上就是一个 Context Logger，不过在打印日志的时候还会额外的加上文件路径，方便定位日志的打印位置。</p><h2 id="subscription" tabindex="-1"><a class="header-anchor" href="#subscription"><span>Subscription</span></a></h2><p>订阅模型是一种比较常见的开发模式，譬如消息中间件的消费者或调度任务。因此我们提供了 Subscription 基类来规范化这个模式。<br> 可以通过以下方式来引用 Subscription 基类：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes monokai one-light vp-code"><code><span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#986801;"> Subscription</span><span style="--shiki-dark:#F92672;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> require</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E6DB74;--shiki-light:#50A14F;">&quot;egg&quot;</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">).</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#E45649;">Subscription</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#66D9EF;--shiki-light:#A626A4;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">class</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Schedule</span><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#A6E22E;--shiki-light:#C18401;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;--shiki-dark-text-decoration:underline;--shiki-light-text-decoration:inherit;"> Subscription</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // 需要实现此方法</span></span>
<span class="line"><span style="--shiki-dark:#88846F;--shiki-light:#A0A1A7;--shiki-dark-font-style:inherit;--shiki-light-font-style:italic;">  // subscribe 可以为 async function 或 generator function</span></span>
<span class="line"><span style="--shiki-dark:#F92672;--shiki-light:#A626A4;">  async</span><span style="--shiki-dark:#A6E22E;--shiki-light:#4078F2;"> subscribe</span><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">() {}</span></span>
<span class="line"><span style="--shiki-dark:#F8F8F2;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件开发者可以根据自己的需求基于它定制订阅规范，如<a href="https://eggjs.org/zh-cn/basics/schedule.html" target="_blank" rel="noopener noreferrer">定时任务</a>就是使用这种规范实现的。</p>`,74),t=[l];function h(p,r){return n(),s("div",null,t)}const c=i(e,[["render",h],["__file","egg1.html.vue"]]),o=JSON.parse('{"path":"/article/node/2021/egg1.html","title":"Egg 学习笔记（一） 之 目录结构 与 内置基础对象","lang":"zh-CN","frontmatter":{"title":"Egg 学习笔记（一） 之 目录结构 与 内置基础对象","date":"2021-07-29T00:00:00.000Z","tags":["egg"],"categories":["Node"],"description":"目录结构 在快速入门中，大家对框架应该有了初步的印象，接下来我们简单了解下目录约定规范。 原文档地址： 目录结构 内置基础对象 包括从 Koa 继承而来的 4 个对象（Application, Context, Request, Response) 以及框架扩展的一些对象（Controller, Service, Helper, Config, Log...","head":[["meta",{"property":"og:url","content":"http://zesionlee.cn/article/node/2021/egg1.html"}],["meta",{"property":"og:site_name","content":"全栈笔记"}],["meta",{"property":"og:title","content":"Egg 学习笔记（一） 之 目录结构 与 内置基础对象"}],["meta",{"property":"og:description","content":"目录结构 在快速入门中，大家对框架应该有了初步的印象，接下来我们简单了解下目录约定规范。 原文档地址： 目录结构 内置基础对象 包括从 Koa 继承而来的 4 个对象（Application, Context, Request, Response) 以及框架扩展的一些对象（Controller, Service, Helper, Config, Log..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-31T09:25:21.000Z"}],["meta",{"property":"article:author","content":"阿琛"}],["meta",{"property":"article:tag","content":"egg"}],["meta",{"property":"article:published_time","content":"2021-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-31T09:25:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Egg 学习笔记（一） 之 目录结构 与 内置基础对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-31T09:25:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿琛\\",\\"url\\":\\"http://zesionlee.cn\\"}]}"]]},"headers":[{"level":2,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":2,"title":"内置基础对象","slug":"内置基础对象","link":"#内置基础对象","children":[]},{"level":2,"title":"Application","slug":"application","link":"#application","children":[{"level":3,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":3,"title":"获取方式","slug":"获取方式","link":"#获取方式","children":[]}]},{"level":2,"title":"Context","slug":"context","link":"#context","children":[{"level":3,"title":"获取方式","slug":"获取方式-1","link":"#获取方式-1","children":[]}]},{"level":2,"title":"Request & Response","slug":"request-response","link":"#request-response","children":[{"level":3,"title":"获取方式","slug":"获取方式-2","link":"#获取方式-2","children":[]}]},{"level":2,"title":"Controller","slug":"controller","link":"#controller","children":[]},{"level":2,"title":"Service","slug":"service","link":"#service","children":[]},{"level":2,"title":"Helper","slug":"helper","link":"#helper","children":[{"level":3,"title":"获取方式","slug":"获取方式-3","link":"#获取方式-3","children":[]},{"level":3,"title":"自定义 helper 方法","slug":"自定义-helper-方法","link":"#自定义-helper-方法","children":[]}]},{"level":2,"title":"Config","slug":"config","link":"#config","children":[{"level":3,"title":"获取方式","slug":"获取方式-4","link":"#获取方式-4","children":[]}]},{"level":2,"title":"Logger","slug":"logger","link":"#logger","children":[{"level":3,"title":"App Logger","slug":"app-logger","link":"#app-logger","children":[]},{"level":3,"title":"App CoreLogger","slug":"app-corelogger","link":"#app-corelogger","children":[]},{"level":3,"title":"Context Logger","slug":"context-logger","link":"#context-logger","children":[]},{"level":3,"title":"Context CoreLogger","slug":"context-corelogger","link":"#context-corelogger","children":[]},{"level":3,"title":"Controller Logger & Service Logger","slug":"controller-logger-service-logger","link":"#controller-logger-service-logger","children":[]}]},{"level":2,"title":"Subscription","slug":"subscription","link":"#subscription","children":[]}],"git":{"createdTime":1722325759000,"updatedTime":1722417921000,"contributors":[{"name":"zesionlee","email":"39211025+zesion21@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.12,"words":2436},"filePathRelative":"article/node/2021/egg1.md","localizedDate":"2021年7月29日","excerpt":"<h2>目录结构</h2>\\n<p>在快速入门中，大家对框架应该有了初步的印象，接下来我们简单了解下目录约定规范。</p>\\n<p>原文档地址： <a href=\\"https://www.eggjs.org/zh-CN/basics/structure\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">目录结构</a></p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-dark:#F8F8F2;--shiki-light:#383A42;--shiki-dark-bg:#272822;--shiki-light-bg:#FAFAFA\\"><pre class=\\"shiki shiki-themes monokai one-light vp-code\\"><code><span class=\\"line\\"><span>egg-project</span></span>\\n<span class=\\"line\\"><span>├── package.json</span></span>\\n<span class=\\"line\\"><span>├── app.js (可选)</span></span>\\n<span class=\\"line\\"><span>├── agent.js (可选)</span></span>\\n<span class=\\"line\\"><span>├── app</span></span>\\n<span class=\\"line\\"><span>|   ├── router.js</span></span>\\n<span class=\\"line\\"><span>│   ├── controller</span></span>\\n<span class=\\"line\\"><span>│   |   └── home.js</span></span>\\n<span class=\\"line\\"><span>│   ├── service (可选)</span></span>\\n<span class=\\"line\\"><span>│   |   └── user.js</span></span>\\n<span class=\\"line\\"><span>│   ├── middleware (可选)</span></span>\\n<span class=\\"line\\"><span>│   |   └── response_time.js</span></span>\\n<span class=\\"line\\"><span>│   ├── schedule (可选)</span></span>\\n<span class=\\"line\\"><span>│   |   └── my_task.js</span></span>\\n<span class=\\"line\\"><span>│   ├── public (可选)</span></span>\\n<span class=\\"line\\"><span>│   |   └── reset.css</span></span>\\n<span class=\\"line\\"><span>│   ├── view (可选)</span></span>\\n<span class=\\"line\\"><span>│   |   └── home.tpl</span></span>\\n<span class=\\"line\\"><span>│   └── extend (可选)</span></span>\\n<span class=\\"line\\"><span>│       ├── helper.js (可选)</span></span>\\n<span class=\\"line\\"><span>│       ├── request.js (可选)</span></span>\\n<span class=\\"line\\"><span>│       ├── response.js (可选)</span></span>\\n<span class=\\"line\\"><span>│       ├── context.js (可选)</span></span>\\n<span class=\\"line\\"><span>│       ├── application.js (可选)</span></span>\\n<span class=\\"line\\"><span>│       └── agent.js (可选)</span></span>\\n<span class=\\"line\\"><span>├── config</span></span>\\n<span class=\\"line\\"><span>|   ├── plugin.js</span></span>\\n<span class=\\"line\\"><span>|   ├── config.default.js</span></span>\\n<span class=\\"line\\"><span>│   ├── config.prod.js</span></span>\\n<span class=\\"line\\"><span>|   ├── config.test.js (可选)</span></span>\\n<span class=\\"line\\"><span>|   ├── config.local.js (可选)</span></span>\\n<span class=\\"line\\"><span>|   └── config.unittest.js (可选)</span></span>\\n<span class=\\"line\\"><span>└── test</span></span>\\n<span class=\\"line\\"><span>    ├── middleware</span></span>\\n<span class=\\"line\\"><span>    |   └── response_time.test.js</span></span>\\n<span class=\\"line\\"><span>    └── controller</span></span>\\n<span class=\\"line\\"><span>        └── home.test.js</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};
